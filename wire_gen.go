// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"github.com/protocyber/kelasgo-api/internal/config"
	"github.com/protocyber/kelasgo-api/internal/database"
	"github.com/protocyber/kelasgo-api/internal/handler"
	"github.com/protocyber/kelasgo-api/internal/repository"
	"github.com/protocyber/kelasgo-api/internal/service"
	"github.com/protocyber/kelasgo-api/internal/util"
)

// Injectors from wire.go:

// InitializeApp initializes the application with all dependencies
func InitializeApp() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	databaseConnections, err := database.NewConnections(configConfig)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(databaseConnections)
	roleRepository := repository.NewRoleRepository(databaseConnections)
	tenantUserRepository := repository.NewTenantUserRepository(databaseConnections)
	tenantUserRoleRepository := repository.NewTenantUserRoleRepository(databaseConnections)
	v := ProvideJWTConfig(configConfig)
	jwtService := util.NewJWTService(v)
	authService := service.NewAuthService(userRepository, roleRepository, tenantUserRepository, tenantUserRoleRepository, jwtService)
	validate := ProvideValidator()
	authHandler := handler.NewAuthHandler(authService, validate)
	userService := service.NewUserService(userRepository, roleRepository, tenantUserRepository, tenantUserRoleRepository)
	userHandler := handler.NewUserHandler(userService, validate)
	studentRepository := repository.NewStudentRepository(databaseConnections)
	studentService := service.NewStudentService(studentRepository, tenantUserRepository)
	studentHandler := handler.NewStudentHandler(studentService, validate)
	app := NewApp(authHandler, userHandler, studentHandler, databaseConnections, jwtService, configConfig)
	return app, nil
}

// wire.go:

// App represents the main application structure
type App struct {
	AuthHandler    *handler.AuthHandler
	UserHandler    *handler.UserHandler
	StudentHandler *handler.StudentHandler
	DBConns        *database.DatabaseConnections
	JWTService     *util.JWTService
	Config         *config.Config
}

// GetConfig returns the application configuration
func (a *App) GetConfig() *config.Config {
	return a.Config
}

// GetDBConns returns the database connections
func (a *App) GetDBConns() *database.DatabaseConnections {
	return a.DBConns
}

// ProviderSet contains all the wire providers
var ProviderSet = wire.NewSet(config.Load, database.NewConnections, ProvideValidator,

	ProvideJWTConfig, util.NewJWTService, repository.NewUserRepository, repository.NewRoleRepository, repository.NewTenantUserRepository, repository.NewTenantUserRoleRepository, repository.NewStudentRepository, service.NewAuthService, service.NewUserService, service.NewStudentService, handler.NewAuthHandler, handler.NewUserHandler, handler.NewStudentHandler, NewApp,
)

// ProvideJWTConfig extracts JWT config from main config
func ProvideJWTConfig(cfg *config.Config) *config.JWTConfig {
	return (*config.JWTConfig)(&cfg.JWT)
}

// ProvideValidator creates a new validator instance
func ProvideValidator() *validator.Validate {
	return validator.New()
}

// NewApp creates a new App instance
func NewApp(
	authHandler *handler.AuthHandler,
	userHandler *handler.UserHandler,
	studentHandler *handler.StudentHandler,
	dbConns *database.DatabaseConnections,
	jwtService *util.JWTService,
	cfg *config.Config,
) *App {
	return &App{
		AuthHandler:    authHandler,
		UserHandler:    userHandler,
		StudentHandler: studentHandler,
		DBConns:        dbConns,
		JWTService:     jwtService,
		Config:         cfg,
	}
}
